# Use Union Find to solve this question
# Check https://www.cnblogs.com/seyjs/p/9811590.html
class Solution:
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        parent = [i for i in range(len(graph))]
        
        def find(v, parent):
            if parent[v] == v:
                return v
            return find(parent[v],parent)
        def union(v1, v2):
            p1 = find(v1, parent)
            p2 = find(v2, parent)
            if p1 < p2:
                parent[p2] = p1
            else:
                parent[p1] = p2
        
        for i in range(len(graph)):
            for j in range(len(graph[i])):
                if i != j and graph[i][j] == 1:
                    union(i,j)
        dic = {}
        for i in range(len(graph)):
            p = find(i, parent)
            dic[p] = dic.setdefault(p,0) + 1
        pl = []
        for i in initial:
            p = find(i, parent)
            pl.append(p)
        
        res = None
        count = 0
        for i in initial:
            p = find(i, parent)
            if pl.count(p) == 1:
                if count < dic[p]:
                    count = dic[p]
                    res = i
                elif count == dic[p]:
                    res = min(res, i)
        if res == None:
            res = min(initial)
        return res
